@using System.Runtime.InteropServices.WindowsRuntime
@using Velopack
@using Velopack.Sources
@inherits LayoutComponentBase

@inject IStringLocalizer<Strings> Localizer

<RadzenDialog/>
<RadzenNotification/>
<RadzenContextMenu/>

<div class="page">
    <div class="sidebar d-print-none">
        <NavMenu/>
    </div>

    <main>
        <div class="top-row px-4 d-print-none">
            @Localizer["Version"]
            @(updateManager.CurrentVersion?.ToString() ?? "?")
            
            @if (UpdateInfo is not null)
            {
                <a @onclick="RunUpdate">&nbsp;| @Localizer["Update available"] </a>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {

    private readonly UpdateManager updateManager = new(new GithubSource("https://github.com/SvenDub/ZwemTools", null, false));

    private UpdateInfo? UpdateInfo { get; set; }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await AsyncInfo.Run(async cancellationToken =>
        {
            try
            {
                if (!updateManager.IsInstalled)
                {
                    return;
                }
                
                UpdateInfo = await updateManager.CheckForUpdatesAsync();
                if (UpdateInfo is null)
                {
                    return;
                }

                await updateManager.DownloadUpdatesAsync(UpdateInfo, cancelToken: cancellationToken);
            }
            catch (Exception)
            {
                // Ignore updater exceptions
            }
        });
    }

    private void RunUpdate()
    {
        if (UpdateInfo is not null)
        {
            updateManager.ApplyUpdatesAndRestart(UpdateInfo);
        }
    }
}
