@page "/splash-quest/{Id:guid}/seeding"

@using ZwemTools.Data.Sql
@using ZwemTools.Data.Sql.SplashQuest
@using ZwemTools.Data.Lenex.Xml
@using ZwemTools.Data.Lenex
@using Windows.Storage.Pickers
@using Windows.Storage

@inject DatabaseContext Context
@inject LenexParser LenexParser
@inject IStringLocalizer<Strings> Localizer

<h3><a href="/splash-quest/@Id"><i class="fa-solid fa-chevron-left mr-2" aria-label="Back"></i></a>@Localizer["Seeding"]</h3>

@if (Meet is not null)
{
    <RadzenButton Text="@Localizer["Calculate seeding"]" Click="CalculateSeeding"></RadzenButton>
    <RadzenButton Text="@Localizer["Export"]" Click="ExportSeeding"></RadzenButton>
    foreach (Session session in Meet.Meet.Sessions)
    {
        <h4>@session.Name (@session.Date)</h4>
        foreach (Event ev in session.Events.OrderBy(ev => ev.Number))
        {
            <h5>@ev.Number - @ev.SwimStyle</h5>
            foreach (Heat heat in ev.Heats.OrderBy(heat => heat.Number))
            {
                <h6>@heat.Number</h6>
                <ol>
                @foreach (Entry entry in heat.Entries.OrderBy(entry => entry.Lane))
                {
                    <li value="@entry.Lane">@entry.Athlete.FullName (@Meet.Teams.First(team => team.Athletes.Contains(entry.Athlete)).Name) | @entry.EntryTime.Format()</li>
                }
                </ol>
            }
        }
    }
}

@code {
    [Parameter]
    required public Guid Id { get; set; }

    private SplashQuestMeet? Meet { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        Meet = Context.SplashQuestMeets.SingleOrDefault(x => x.Id == Id);
    }

    private async Task CalculateSeeding()
    {
        if (Meet is null)
        {
            return;
        }

        int lanes = Meet.Meet.Pool?.Lanes ?? 4;

        foreach (Session session in Meet.Meet.Sessions)
        {
            foreach (Event ev in session.Events)
            {
                foreach (Entry entry in ev.Entries)
                {
                    entry.Lane = null;
                    entry.Heat = null;
                    entry.HeatId = null;
                }

                for (int heat = 0; heat < 8; heat++)
                {
                    for (int lane = 0; lane < lanes; lane++)
                    {
                        int teamIdx = (heat % 2) * lanes + lane;
                        if (teamIdx < Meet.Teams.Count)
                        {
                            Team team = Meet.Teams
                                .OrderBy(team => team.Name)
                                .Skip(teamIdx)
                                .First();
                            Assignment assignment = team.Assignments
                                .Where(assignment => assignment.Stroke == ev.SwimStyle.Stroke)
                                .OrderByDescending(assignment => assignment.Athlete.Entries.First(entry => entry.Event == ev).EntryTime)
                                .Skip(heat / 2)
                                .First();
                            Entry entry = assignment.Athlete.Entries.First(entry => entry.Event == ev);
                            entry.Heat = ev.Heats.First(h => h.Number == heat + 1);
                            entry.HeatId = entry.Heat.Id;
                            entry.Lane = lane + 1;
                        }
                    }
                }
            }
        }

        await Context.SaveChangesAsync();
    }

    private async Task ExportSeeding()
    {
        if (Meet is null)
        {
            return;
        }

        FileSavePicker fileSavePicker = new()
        {
            SuggestedFileName = "entries.lxf",
        };
        fileSavePicker.FileTypeChoices.Add("Lenex file", new List<string> {".lxf"});

        if (MauiWinUIApplication.Current.Application.Windows[0].Handler?.PlatformView is MauiWinUIWindow window)
        {
            WinRT.Interop.InitializeWithWindow.Initialize(fileSavePicker, window.WindowHandle);
        }
        
        StorageFile? result = await fileSavePicker.PickSaveFileAsync();
        if (result is not null)
        {
            LenexElement lenexElement = new()
            {
                Version = "3.0",
                Constructor = new ConstructorElement
                {
                    Name = AppInfo.Name,
                    Version = AppInfo.Version.ToString(),
                    Contact = new ContactElement
                    {
                        Email = "sven@svendubbeld.nl",
                    },
                },
                Meets = new Collection<MeetElement>
                {
                    Meet.Meet.ToLenex(),
                },
            };

            string file = Path.GetFileNameWithoutExtension(result.Name);
            await using Stream stream = await result.OpenStreamForWriteAsync();
            LenexParser.Write(lenexElement, file, stream);
        }
    }

}
