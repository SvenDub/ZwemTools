@page "/splash-quest/{Id:guid}/teams"

@using ZwemTools.Data.Sql
@using ZwemTools.Data.Sql.SplashQuest

@inject DatabaseContext Context
@inject IStringLocalizer<Strings> Localizer

<div class="d-print-none">
    <h3>@Localizer["SplashQuest"]</h3>
</div>

@if (!IsLoading && Meet is not null)
{
    <a href="/splash-quest/@Id/create-teams">Create teams</a>
    
    @foreach (Team team in Meet.Teams)
    {
        <RadzenDataGrid TItem="Athlete" Data="team.Athletes" class="mb-2 pagebreak">
            <Columns>
                <RadzenDataGridColumn TItem="Athlete" Property="FullName" Title="@Localizer["Name"]">
                    <FooterTemplate>@Localizer["Average"]</FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Property="Birthdate.Year" Title="@Localizer["Year"]"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Gender"]">
                    <Template>
                        @Localizer[context.Gender.ToString()]
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Time"]">
                    <Template>
                        <span class="fw-bold">@CalculateEntryTime(context).Format()</span>
                    </Template>
                    <FooterTemplate>
                        <span class="fw-bold">@TimeSpan.FromSeconds(team.Athletes.Select(CalculateEntryTime).Average(span => span.TotalSeconds)).Format()</span>
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Butterfly"]">
                    <Template>
                        @context.Entries.FirstOrDefault(entry => entry.Event.SwimStyle.Stroke == Stroke.Fly)?.EntryTime?.Format()
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Backstroke"]">
                    <Template>
                        @context.Entries.FirstOrDefault(entry => entry.Event.SwimStyle.Stroke == Stroke.Backstroke)?.EntryTime?.Format()
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Breaststroke"]">
                    <Template>
                        @context.Entries.FirstOrDefault(entry => entry.Event.SwimStyle.Stroke == Stroke.Breaststroke)?.EntryTime?.Format()
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Freestyle"]">
                    <Template>
                        @context.Entries.FirstOrDefault(entry => entry.Event.SwimStyle.Stroke == Stroke.Freestyle)?.EntryTime?.Format()
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
}
else if (IsLoading)
{
    <p class="my-3">@Localizer["Loading"]</p>
}
else
{
    <p class="my-3">@Localizer["NoData"]</p>
}

@code {
    [Parameter]
    required public Guid Id { get; set; }
    
    private bool IsLoading { get; set; }
    private SplashQuestMeet? Meet { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        Meet = Context.SplashQuestMeets.SingleOrDefault(x => x.Id == Id);
    }

    private TimeSpan CalculateEntryTime(Athlete athlete)
    {
        return athlete.Entries.Select(entry => entry.EntryTime).WhereNotNull().Aggregate(TimeSpan.Zero, (left, right) => left + right);
    }
}
