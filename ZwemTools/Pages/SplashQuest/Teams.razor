@page "/splash-quest/{Id:guid}/teams"

@using ZwemTools.Data.Sql
@using ZwemTools.Data.Sql.SplashQuest

@inject DatabaseContext Context
@inject IStringLocalizer<Strings> Localizer
@inject ContextMenuService ContextMenuService

<div class="d-print-none">
    <h3><a href="/splash-quest/@Id"><i class="fa-solid fa-chevron-left mr-2" aria-label="Back"></i></a>@Meet?.Meet.Name (@Meet?.Meet.City)</h3>
</div>

@if (!IsLoading && Meet is not null)
{
    <a href="/splash-quest/@Id/teams/create">Create teams</a>
    
    @foreach (Team team in Meet.Teams.OrderBy(team => team.Name))
    {
        <h4>@team.Name</h4>
        <RadzenDataGrid TItem="Athlete" Data="team.Athletes" class="mb-2 pagebreak">
            <Columns>
                <RadzenDataGridColumn TItem="Athlete" Property="FullName" Title="@Localizer["Name"]">
                    <Template>
                        <span @oncontextmenu="@(args => ShowMoveContextMenu(args, context))">
                            @context.FullName
                        </span>
                    </Template>
                    <FooterTemplate>@Localizer["Average"]</FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Property="Birthdate.Year" Title="@Localizer["Year"]"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Gender"]">
                    <Template>
                        @Localizer[context.Gender.ToString()]
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Time"]">
                    <Template>
                        <span class="fw-bold">@CalculateEntryTime(context).Format()</span>
                    </Template>
                    <FooterTemplate>
                        <span class="fw-bold">@TimeSpan.FromSeconds(team.Athletes.Select(CalculateEntryTime).Average(span => span.TotalSeconds)).Format()</span>
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Butterfly"]">
                    <Template>
                        <RadzenCheckBox TValue="bool" Value="team.Assignments.Any(assignment => assignment.Athlete == context && assignment.Stroke == Stroke.Fly)" Change="b => OnAssignmentChange(team, context, Stroke.Fly, b)"></RadzenCheckBox>
                        @context.Entries.FirstOrDefault(entry => entry.Event.SwimStyle.Stroke == Stroke.Fly)?.EntryTime?.Format()
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Backstroke"]">
                    <Template>
                        <RadzenCheckBox TValue="bool" Value="team.Assignments.Any(assignment => assignment.Athlete == context && assignment.Stroke == Stroke.Backstroke)" Change="b => OnAssignmentChange(team, context, Stroke.Backstroke, b)"></RadzenCheckBox>
                        @context.Entries.FirstOrDefault(entry => entry.Event.SwimStyle.Stroke == Stroke.Backstroke)?.EntryTime?.Format()
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Breaststroke"]">
                    <Template>
                        <RadzenCheckBox TValue="bool" Value="team.Assignments.Any(assignment => assignment.Athlete == context && assignment.Stroke == Stroke.Breaststroke)" Change="b => OnAssignmentChange(team, context, Stroke.Breaststroke, b)"></RadzenCheckBox>
                        @context.Entries.FirstOrDefault(entry => entry.Event.SwimStyle.Stroke == Stroke.Breaststroke)?.EntryTime?.Format()
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Freestyle"]">
                    <Template>
                        <RadzenCheckBox TValue="bool" Value="team.Assignments.Any(assignment => assignment.Athlete == context && assignment.Stroke == Stroke.Freestyle)" Change="b => OnAssignmentChange(team, context, Stroke.Freestyle, b)"></RadzenCheckBox>
                        @context.Entries.FirstOrDefault(entry => entry.Event.SwimStyle.Stroke == Stroke.Freestyle)?.EntryTime?.Format()
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
}
else if (IsLoading)
{
    <p class="my-3">@Localizer["Loading"]</p>
}
else
{
    <p class="my-3">@Localizer["NoData"]</p>
}

@code {
    [Parameter]
    required public Guid Id { get; set; }
    
    private bool IsLoading { get; set; }
    private SplashQuestMeet? Meet { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        Meet = Context.SplashQuestMeets.SingleOrDefault(x => x.Id == Id);
    }

    private TimeSpan CalculateEntryTime(Athlete athlete)
    {
        return athlete.Entries.Select(entry => entry.EntryTime).WhereNotNull().Aggregate(TimeSpan.Zero, (left, right) => left + right);
    }

    private async Task OnAssignmentChange(Team team, Athlete athlete, Stroke stroke, bool value)
    {
        if (value && !team.Assignments.Any(assignment => assignment.Athlete == athlete && assignment.Stroke == stroke))
        {
            team.Assignments.Add(new Assignment(Guid.NewGuid()) { AthleteId = athlete.Id, Stroke = stroke, Athlete = athlete });
        }
        else if (!value)
        {
            Assignment? assignment = team.Assignments.FirstOrDefault(assignment => assignment.Athlete == athlete && assignment.Stroke == stroke);
            if (assignment is not null)
            {
                team.Assignments.Remove(assignment);
            }
        }

        await Context.SaveChangesAsync();
        Meet = Context.SplashQuestMeets.SingleOrDefault(x => x.Id == Id);
    }

    private void ShowMoveContextMenu(MouseEventArgs args, Athlete athlete)
    {
        if (Meet is not null)
        {
            ContextMenuService.Open(
                args,
                ds => @<RadzenMenu Click="eventArgs => MoveAthlete(eventArgs, athlete)">
                          <RadzenMenuItem Text="@Localizer["Move"]">
                              @foreach (Team team in Meet.Teams.OrderBy(team => team.Name))
                              {
                                  <RadzenMenuItem Text="@team.Name" Value="@team"></RadzenMenuItem>
                              }
                          </RadzenMenuItem>
                      </RadzenMenu>
                );
        }
    }

    private void MoveAthlete(MenuItemEventArgs args, Athlete athlete)
    {
        if (Meet is not null && args.Value is Team team)
        {
            Team currentTeam = Meet.Teams.First(t => t.Athletes.Contains(athlete));
            foreach (Assignment assignment in currentTeam.Assignments.Where(assignment => assignment.Athlete == athlete))
            {
                currentTeam.Assignments.Remove(assignment);
            }
            currentTeam.Athletes.Remove(athlete);
            team.Athletes.Add(athlete);

            Context.SaveChanges();
            Meet = Context.SplashQuestMeets.SingleOrDefault(x => x.Id == Id);
        }
    }
}
