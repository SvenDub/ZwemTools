@page "/splash-quest"

@using ZwemTools.Data.Lenex.Xml
@using ZwemTools.Data.Lenex

@inject LenexParser LenexParser
@inject IStringLocalizer<Strings> Localizer

<div class="d-print-none">
    <h3>@Localizer["SplashQuest"]</h3>

    <InputFile OnChange="@LoadFile" accept=".lxf"/>
</div>

@if (!IsLoading && LenexElement is not null)
{
    if (LenexElement.Meets is { Count: >0 })
    {
        MeetElement meet = LenexElement.Meets.First();
        SessionElement session = meet.Sessions.First();
        
        <RadzenNumeric Min="1" Max="8" @bind-Value="@TeamsCount"/>
        
        <p>@AthleteCount @Localizer["Athletes"] / @TeamsCount @Localizer["Teams"] = @(((double)AthleteCount / TeamsCount).ToString("g2"))</p>
                                                                                                                                         
        <RadzenButton
            Text="@Localizer["Calculate"]"
            ButtonStyle="ButtonStyle.Primary"
            Click="@CalculateTeams">
        </RadzenButton>
        
        <br/>
        
        @foreach (List<AthleteElement> team in Teams)
        {
            <RadzenDataGrid TItem="AthleteElement" Data="team">
                <Columns>
                    <RadzenDataGridColumn TItem="AthleteElement" Property="FullName" Title="@Localizer["Name"]"></RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AthleteElement" Title="@Localizer["Time"]"></RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AthleteElement">
                        <Template>
                            @CalculateEntryTime(context).Format()
                        </Template>
                        <FooterTemplate>
                            @TimeSpan.FromSeconds(team.Select(CalculateEntryTime).Average(span => span.TotalSeconds)).Format()
                        </FooterTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
    }
    else
    {
        <p class="my-3">@Localizer["NoData"]</p>
    }
}
else if (IsLoading)
{
    <p class="my-3">@Localizer["Loading"]</p>
}
else
{
    <p class="my-3">@Localizer["NoData"]</p>
}

@code {
    private LenexElement? LenexElement { get; set; }
    private bool IsLoading { get; set; }
    private int TeamsCount { get; set; } = 4;
    private int AthleteCount { get; set; }
    private List<List<AthleteElement>> Teams { get; set; } = new();

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        await using Stream stream = e.File.OpenReadStream();
        MemoryStream ms = new();
        await stream.CopyToAsync(ms);
        LenexElement = LenexParser.Parse(ms);
        IsLoading = false;
        AthleteCount = LenexElement.Meets.FirstOrDefault()?.Clubs.SelectMany(club => club.Athletes).Count() ?? 0;
    }

    async Task CalculateTeams()
    {
        TimeSpan targetAverage = TimeSpan.FromSeconds(LenexElement?.Meets.FirstOrDefault()?.Clubs.SelectMany(club => club.Athletes).Select(CalculateEntryTime).Average(span => span.TotalSeconds) ?? 0);
        SortedDictionary<AthleteElement, TimeSpan> athletes = new(Comparer<AthleteElement>.Create((left, right) => CalculateEntryTime(left).CompareTo(CalculateEntryTime(right))));
        foreach (AthleteElement athlete in LenexElement?.Meets.FirstOrDefault()?.Clubs.SelectMany(club => club.Athletes))
        {
            athletes[athlete] = CalculateEntryTime(athlete);
        }

        Teams.Clear();
        for (int i = 0; i < TeamsCount; i++)
        {
            Teams.Add(CreateTeam(athletes, athletes.Count / (TeamsCount - i), targetAverage).ToList());
        }
    }

    private TimeSpan CalculateEntryTime(AthleteElement athlete)
    {
        return athlete.Entries.Select(entry => entry.EntryTime).WhereNotNull().Aggregate(TimeSpan.Zero, (left, right) => left + right);
    }


    private IEnumerable<AthleteElement> CreateTeam(SortedDictionary<AthleteElement, TimeSpan> available, int count, TimeSpan targetAverage)
    {
        TimeSpan total = TimeSpan.Zero;
        TimeSpan average = TimeSpan.Zero;
        
        for (int i = 0; i < count; i++)
        {
            AthleteElement? key;
            TimeSpan value;
            if (average > targetAverage)
            {
                (key, value) = available.First();
            }
            else
            {
                (key, value) = available.Last();
            }
            
            available.Remove(key);
            yield return key;
            total += value;
            average = total / (i + 1);
        }
    }
}
