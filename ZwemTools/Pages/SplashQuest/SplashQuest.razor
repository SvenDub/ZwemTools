@page "/splash-quest/{Id:guid}"

@using ZwemTools.Data.Sql
@using ZwemTools.Data.Sql.SplashQuest
@using ZwemTools.Data.Lenex
@using ZwemTools.Data.Lenex.Xml

@inject DatabaseContext Context
@inject LenexParser LenexParser
@inject IStringLocalizer<Strings> Localizer

@if (Meet is not null)
{
    <h3>@Meet.Meet.Name</h3>
    <p>@Meet.Meet.Clubs.SelectMany(c => c.Athletes).Count() athletes</p>
    <p><a href="/splash-quest/@Id/teams">@Meet.Teams.Count teams</a></p>
                         
    <InputFile OnChange="@LoadFile" accept=".lxf"/>
    <RadzenButton Text="@Localizer["Clear entries"]" Click="@OnClear"></RadzenButton>
}
else
{
    <p>@Localizer["MeetNotFound"]</p>
}

@code {
    [Parameter]
    required public Guid Id { get; set; }

    private SplashQuestMeet? Meet { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        Meet = Context.SplashQuestMeets.SingleOrDefault(x => x.Id == Id);
    }
    
    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        if (Meet is null)
        {
            return;
        }
        
        await using Stream stream = e.File.OpenReadStream();
        MemoryStream ms = new();
        await stream.CopyToAsync(ms);
        
        LenexElement lenexElement = LenexParser.Parse(ms);
        MeetElement? meetElement = lenexElement.Meets.FirstOrDefault(element => element.Name == Meet?.Meet.Name);

        if (meetElement is null)
        {
            return;
        }
        
        List<Club> athletes = meetElement.Clubs.Select(element => element.ToSql()).ToList();
        Meet.Meet.Clubs = athletes;
        await Context.SaveChangesAsync();
    }

    private async Task OnClear()
    {
        if (Meet is null)
        {
            return;
        }
        
        Meet.Teams.Clear();
        Meet.Meet.Clubs.Clear();
        await Context.SaveChangesAsync();
    }

}
