@page "/splash-quest/{Id:guid}/teams/create"

@using ZwemTools.Data.Sql
@using ZwemTools.Data.Sql.SplashQuest
@using Microsoft.EntityFrameworkCore

@inject DatabaseContext Context
@inject IStringLocalizer<Strings> Localizer

<div class="d-print-none">
    <h3><a href="/splash-quest/@Id/teams"><i class="fa-solid fa-chevron-left mr-2" aria-label="Back"></i></a>@Meet?.Meet.Name (@Meet?.Meet.City)</h3>
</div>

@if (!IsLoading && Meet is not null)
{
    <div class="d-print-none">
        <div class="row mb-2">
            <div class="col">
                <RadzenNumeric TValue="int" Min="1" Max="8" Value="@TeamsCount" Change="UpdateTeamsCount"/>
            </div>
            <div class="col">
                <RadzenButton Text="@Localizer["Save"]" Click="@OnSave"></RadzenButton>
            </div>
        </div>
        <div class="row mb-2">
            <div class="col">
                <p>@AthleteCount @Localizer["Athletes"] / @TeamsCount @Localizer["Teams"] = @(((double)AthleteCount / TeamsCount).ToString("g2"))</p>
            </div>
        </div>
    </div>
    
    @foreach (Team team in Teams)
    {
        <h4>@team.Name</h4>
        <RadzenDataGrid TItem="Athlete" Data="team.Athletes" class="mb-2 pagebreak">
            <Columns>
                <RadzenDataGridColumn TItem="Athlete" Property="FullName" Title="@Localizer["Name"]">
                    <FooterTemplate>@Localizer["Average"]</FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Property="Birthdate.Year" Title="@Localizer["Year"]"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Gender"]">
                    <Template>
                        @Localizer[context.Gender.ToString()]
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Time"]">
                    <Template>
                        <span class="fw-bold">@CalculateEntryTime(context).Format()</span>
                    </Template>
                    <FooterTemplate>
                        @TimeSpan.FromSeconds(team.Athletes.Select(CalculateEntryTime).Average(span => span.TotalSeconds)).Format()
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Butterfly"]">
                    <Template>
                        @context.Entries.FirstOrDefault(entry => entry.Event.SwimStyle.Stroke == Stroke.Fly)?.EntryTime?.Format()
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Backstroke"]">
                    <Template>
                        @context.Entries.FirstOrDefault(entry => entry.Event.SwimStyle.Stroke == Stroke.Backstroke)?.EntryTime?.Format()
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Breaststroke"]">
                    <Template>
                        @context.Entries.FirstOrDefault(entry => entry.Event.SwimStyle.Stroke == Stroke.Breaststroke)?.EntryTime?.Format()
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Athlete" Title="@Localizer["Freestyle"]">
                    <Template>
                        @context.Entries.FirstOrDefault(entry => entry.Event.SwimStyle.Stroke == Stroke.Freestyle)?.EntryTime?.Format()
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
}
else if (IsLoading)
{
    <p class="my-3">@Localizer["Loading"]</p>
}
else
{
    <p class="my-3">@Localizer["NoData"]</p>
}

@code {
    [Parameter]
    required public Guid Id { get; set; }
    
    private bool IsLoading { get; set; }
    private int TeamsCount { get; set; } = 4;
    private int AthleteCount { get; set; }
    private List<Team> Teams { get; set; } = new();
    private SplashQuestMeet? Meet { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        Meet = Context.SplashQuestMeets
            .Include(meet => meet.Meet)
            .ThenInclude(meet => meet.Clubs)
            .ThenInclude(club => club.Athletes)
            .SingleOrDefault(x => x.Id == Id);
        AthleteCount = Meet?.Meet.Clubs.SelectMany(club => club.Athletes).Count() ?? 0;
        TeamsCount = (int)Math.Ceiling(AthleteCount / 8d);
        CalculateTeams();
    }
    
    private async Task OnSave()
    {
        if (Meet is not null)
        {
            Context.SplashQuestTeams.RemoveRange(Meet.Teams);
            Context.SplashQuestTeams.AddRange(Teams);
            Meet.Teams = Teams;
            await Context.SaveChangesAsync();

            Meet = await Context.SplashQuestMeets.FindAsync(Meet.Id);
        }
    }

    void CalculateTeams()
    {
        if (Meet is null)
        {
            return;
        }
        
        SortedDictionary<Athlete, TimeSpan> athletes = new(Comparer<Athlete>.Create((left, right) => CalculateEntryTime(left).CompareTo(CalculateEntryTime(right))));
        foreach (Athlete athlete in Meet.Meet.Clubs.SelectMany(club => club.Athletes))
        {
            athletes[athlete] = CalculateEntryTime(athlete);
        }
        
        TimeSpan targetAverage = TimeSpan.FromSeconds(athletes.Values.Average(span => span.TotalSeconds));

        List<Team> teams = new();
        for (int i = 0; i < TeamsCount; i++)
        {
            teams.Add(new Team(Guid.NewGuid())
            {
                Name = $"Team {i + 1}",
                Athletes = CreateTeam(athletes, athletes.Count / (TeamsCount - i), targetAverage).ToList(),
            });
        }
        Teams = teams;
    }

    void UpdateTeamsCount(int value)
    {
        TeamsCount = value;
        CalculateTeams();
    }

    private TimeSpan CalculateEntryTime(Athlete athlete)
    {
        return athlete.Entries.Select(entry => entry.EntryTime).WhereNotNull().Aggregate(TimeSpan.Zero, (left, right) => left + right);
    }


    private IEnumerable<Athlete> CreateTeam(SortedDictionary<Athlete, TimeSpan> available, int count, TimeSpan targetAverage)
    {
        TimeSpan total = TimeSpan.Zero;
        
        for (int i = 0; i < count; i++)
        {
            Athlete? key;
            TimeSpan value;

            if (i == 0)
            {
                (key, value) = available.First();
            }
            else
            {
                (key, value) = available.MinBy(pair => Math.Abs(((pair.Value + total) / (i + 1) - targetAverage).TotalSeconds));
            }
            
            available.Remove(key);
            yield return key;
            total += value;
        }
    }
}
