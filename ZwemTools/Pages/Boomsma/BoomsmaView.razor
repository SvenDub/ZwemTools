@page "/boomsma"

@using ZwemTools.Data.Sql

@inject DatabaseContext Context
@inject BoomsmaService BoomsmaService

<h3>Boomsma Bokalen</h3>

<div class="row">
    <div class="col">
        <RadzenDropDown TValue="Session" AllowVirtualization="true" Data="Sessions" Change="@OnFromSelected" style="height: auto;">
            <Template>
                @if (context is Session session)
                {
                    <span class="d-block">@session.Name (@session.Number)</span>
                    <span class="d-block text-muted small">@session.Date (@session.StartTime)</span>
                }
            </Template>
        </RadzenDropDown>
    </div>
    <div class="col">
        <RadzenDropDown TValue="Session" AllowVirtualization="true" Data="Sessions" Change="@OnToSelected" style="height: auto;">
            <Template>
                @if (context is Session session)
                {
                    <span class="d-block">@session.Name (@session.Number)</span>
                    <span class="d-block text-muted small">@session.Date (@session.StartTime)</span>
                }
            </Template>
        </RadzenDropDown>
    </div>
    <div class="col">
        <RadzenButton Text="@Strings.Calculate" Click="@OnCalculate"/>
    </div>
</div>

@if (Results is not null)
{
    foreach (((Stroke Stroke, Gender Gender) key, ICollection<BoomsmaResult> results) in Results.Results)
    {
        <RadzenPanel AllowCollapse="true" Collapsed="true">
            <HeaderTemplate>
                <h4>@key.Stroke - @key.Gender</h4>
            </HeaderTemplate>
            <ChildContent>
                <RadzenCard>
                    <RadzenDataGrid TItem="BoomsmaResult" Data="results">
                        <Columns>
                            <RadzenDataGridColumn TItem="BoomsmaResult" Property="Athlete.FullName" Title="@Strings.Name"/>
                            <RadzenDataGridColumn TItem="BoomsmaResult" Title="@Strings.FromResultTime">
                                <Template>
                                    @FormatSwimTime(context.FromResult?.SwimTime) <span class="text-danger">@(context.FromResult?.Status)</span>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="BoomsmaResult" Title="@Strings.Distance">
                                <Template>
                                    @(context.FromResult?.Event.SwimStyle.Distance.ToString(@"#m"))
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="BoomsmaResult" Title="@Strings.ToResultTime">
                                <Template>
                                    @FormatSwimTime(context.ToResult?.SwimTime)
                                    @if (context.ToResult is { Status: not null })
                                    {
                                        <span class="text-danger">&#32;@(context.ToResult?.Status) (@FormatSwimTime(context.ToResult?.SwimTimeWithPenalty))</span>
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="BoomsmaResult" Title="@Strings.Distance">
                                <Template>
                                    @(context.ToResult?.Event.SwimStyle.Distance.ToString(@"#m"))
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="BoomsmaResult" Title="@Strings.Difference">
                                <Template>
                                    @FormatSwimTime(context.Difference)
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenCard>
            </ChildContent>
            <SummaryTemplate>
                <RadzenCard>
                    @if (results.Any(x => x.Difference is not null))
                    {
                        <b>@results.First(x => x.Difference is not null).Athlete.FullName (@FormatSwimTime(results.First().Difference))</b>
                    }
                    else
                    {
                        <b>@Strings.NoData</b>
                    }
                </RadzenCard>
            </SummaryTemplate>
        </RadzenPanel>
    }
}

@code {
    private IQueryable<Session> Sessions { get; set; } = null!;

    private Session? FromSession { get; set; }
    private Session? ToSession { get; set; }
    private BoomsmaResults? Results { get; set; }

    protected override void OnInitialized()
    {
        Sessions = Context.Sessions.OrderByDescending(x => x.Date).ThenByDescending(x => x.StartTime);
        Context.SavedChanges += (_, _) => { Sessions = Context.Sessions.OrderByDescending(x => x.Date).ThenByDescending(x => x.StartTime); };
    }

    void OnFromSelected(object o)
    {
        if (o is Session session)
        {
            FromSession = session;
        }
    }

    void OnToSelected(object o)
    {
        if (o is Session session)
        {
            ToSession = session;
        }
    }

    void OnCalculate()
    {
        if (FromSession is not null && ToSession is not null)
        {
            Results = BoomsmaService.CalculateResults(FromSession, ToSession);
        }
    }

    string FormatSwimTime(TimeSpan? time) => time.Format();
}
