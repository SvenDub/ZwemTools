@page "/relays"

@using Microsoft.Extensions.Logging
@using ZwemTools.Data.TeamManager
@using Group = ZwemTools.Data.TeamManager.Group

@inject ITeamManagerDatabase Database
@inject RelaysService RelaysService
@inject IStringLocalizer<Strings> Localizer
@inject DialogService DialogService
@inject ILogger<Relays> Logger

<h3>@Strings.Relays</h3>

@if (!OperatingSystem.IsWindows())
{
    <p>@Localizer["Windows only!"]</p>
    return;
}

@if (TeamManagerFound is null)
{
    <p>@Localizer["Looking for Team Manager..."]</p>
    return;
}
@if (!TeamManagerFound.Value)
{
    <p>@Localizer["Team Manager not found."]</p>
    return;
}

<div class="row mb-2">
    <div class="col">
        <RadzenDropDown TValue="Meet" AllowVirtualization="false" Data="Meets" Change="@OnMeetSelected" style="height: auto;" @bind-Value="SelectedMeet">
            <Template>
                @if (context is Meet meet)
                {
                    <span class="d-block">@meet.Name (@meet.Place)</span>
                    <span class="d-block text-muted small">@meet.MaxDate.ToString("d")</span>
                }
            </Template>
        </RadzenDropDown>
    </div>
    @if (Events is not null)
    {
        <div class="col">
            <RadzenDropDown TValue="Event" AllowVirtualization="false" Data="Events" Change="@OnEventSelected" style="height: auto;" @bind-Value="SelectedEvent">
                <Template>
                    @if (context is Event ev)
                    {
                        <span class="d-block">@ev.Number - @(ev.SwimStyle?.RelayCount)x@(ev.SwimStyle?.Distance)m @ev.SwimStyle?.Stroke (@ev.MinAge-@ev.MaxAge, @ev.Gender)</span>
                    }
                </Template>
            </RadzenDropDown>
        </div>
    }
</div>

@if (SelectedEvent is { SwimStyle: { } })
{
    <div class="row mb-2">
        <div class="col-2">

        </div>
        <div class="col">
            <RadzenListBox
                @bind-Value="@SelectedMembers"
                Data="@FilteredMembers"
                Multiple
                AllowClear
                AllowFiltering
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                FilterOperator="StringFilterOperator.Contains"
                TextProperty="@nameof(Member.FullName)"
                Style="height: 400px">
            </RadzenListBox>
        </div>
        <div class="col">
            <RadzenListBox
                TValue="IEnumerable<Group>"
                Value="@SelectedGroups"
                ValueChanged="@OnFilterChanged"
                Data="@Groups"
                Multiple
                AllowClear
                AllowFiltering
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                FilterOperator="StringFilterOperator.Contains"
                TextProperty="@nameof(Group.Name)"
                Style="height: 400px">
            </RadzenListBox>
        </div>
    </div>
    <div class="row mb-2">
        <div class="col">
            <RadzenButton
                Text="@Strings.Calculate"
                ButtonStyle="ButtonStyle.Primary"
                Click="@CalculateRelay"
                Disabled="@(SelectedMembers.Count < SelectedEvent.SwimStyle.RelayCount)">
            </RadzenButton>
            <RadzenButton
                Text="@Strings.SelectAllInMeet"
                ButtonStyle="ButtonStyle.Secondary"
                Click="@SelectAllInMeet">
            </RadzenButton>
            <RadzenNumeric Min="1" @bind-Value="@RelayCount"/>
        </div>
    </div>
}

@if (IsLoading)
{
    @if (Progress is not null)
    {
        <RadzenProgressBar Value="Progress.Loaded" Max="Progress.Total" ShowValue="false" Mode="Progress.LengthComputable ? ProgressBarMode.Determinate : ProgressBarMode.Indeterminate" class="my-2"></RadzenProgressBar>
    }
    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="Cancel" class="my-2">@Localizer["Cancel"]</RadzenButton>
}

@if (GeneratedRelays is { } relays && SelectedEvent is { SwimStyle: { } swimStyle })
{
    @foreach (Relay? relay in relays)
    {
        <RadzenDataGrid TItem="RelayPosition" Data="relay.Positions" class="mb-2">
            <Columns>
                <RadzenDataGridColumn TItem="RelayPosition" Property="Number"/>
                <RadzenDataGridColumn TItem="RelayPosition" Property="Member.FullName" Title="@Strings.Name"/>
                <RadzenDataGridColumn TItem="RelayPosition" Title="@Strings.Time">
                    <Template>
                        @context.EntryTimeSpan.Format()
                    </Template>
                    <FooterTemplate>
                        <span class="@(relay.Positions.Count < swimStyle.RelayCount ? "text-danger" : "")">@relay.EntryTime.Format()</span>
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="RelayPosition" Property="@nameof(RelayPosition.Stroke)" Title="@Strings.Stroke"/>
            </Columns>
        </RadzenDataGrid>
    }
}

@code {
    private bool? TeamManagerFound { get; set; }
    private IEnumerable<Meet>? Meets { get; set; }
    private IEnumerable<Member>? Members { get; set; }
    private Meet? SelectedMeet { get; set; }
    private IEnumerable<Event>? Events { get; set; }
    private Event? SelectedEvent { get; set; }
    private IEnumerable<Member>? MembersInMeet { get; set; }
    private List<Member> SelectedMembers { get; set; } = new();
    private IEnumerable<Group>? Groups { get; set; }
    private IEnumerable<Group> SelectedGroups { get; set; } = new List<Group>();
    private List<Member> FilteredMembers { get; } = new();
    private IEnumerable<Relay>? GeneratedRelays { get; set; }
    private bool IsLoading { get; set; }
    private int RelayCount { get; set; } = 1;
    private ProgressEventArgs? Progress { get; set; }
    private CancellationTokenSource? CancellationTokenSource { get; set; }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        TeamManagerFound = await Database.TestConnection();

        if (TeamManagerFound.Value)
        {
            Meets = (await Database.GetMeetsWithRelays()).ToList();
            Members = (await Database.GetMembers()).ToList();
            Groups = (await Database.GetGroups()).ToList();
            SelectedGroups = Groups.Where(g => g.Id == "LICENTIE").ToList();
            UpdateFilteredMembers();
        }
    }

    async Task OnMeetSelected(object o)
    {
        GeneratedRelays = null;
        if (o is Meet meet)
        {
            SelectedMeet = meet;
            Events = await Database.GetRelays(meet.Id);
            SelectedEvent = null;
            MembersInMeet = await Database.GetMembers(meet.Id);
        }
        else
        {
            SelectedMeet = null;
            Events = null;
            SelectedEvent = null;
            MembersInMeet = null;
        }
    }

    void OnEventSelected(object o)
    {
        GeneratedRelays = null;
        if (o is Event ev)
        {
            SelectedEvent = ev;
        }
        else
        {
            SelectedEvent = null;
        }
    }

    void OnFilterChanged(IEnumerable<Group> o)
    {
        SelectedGroups = o;
        UpdateFilteredMembers();
    }

    void SelectAllInMeet()
    {
        if (MembersInMeet is not null)
        {
            foreach (Member? member in MembersInMeet.Where(member => !SelectedMembers.Contains(member)))
            {
                SelectedMembers.Add(member);
            }
        }
    }

    async Task CalculateRelay()
    {
        if (SelectedMeet is not null && SelectedEvent is not null)
        {
            try
            {
                IsLoading = true;
                GeneratedRelays = Array.Empty<Relay>();
                Progress = null;
                CancellationTokenSource = new CancellationTokenSource();
                await Task.Yield();
                GeneratedRelays = await RelaysService.CalculateRelays(SelectedMeet, SelectedEvent, SelectedMembers, RelayCount, OnProgressUpdated, CancellationTokenSource.Token);
            }
            catch (Exception e)
            {
                // Ignore cancellations
                if (e is not OperationCanceledException)
                {
                    Logger.LogError(e, "An error has occurred while calculating the relay");
                    await DialogService.Alert(e.Message, Localizer["Error"]);
                }
            }
            finally
            {
                IsLoading = false;
                CancellationTokenSource?.Dispose();
            }
        }
    }

    private void OnProgressUpdated(object? sender, ProgressEventArgs e)
    {
        Progress = e;
        InvokeAsync(StateHasChanged);
    }

    private void UpdateFilteredMembers()
    {
        FilteredMembers.Clear();
        FilteredMembers.AddRange(Members?.Where(member => member.GroupNames.Any(group => SelectedGroups.Any(s => s.Id == group))) ?? Enumerable.Empty<Member>());
    }

    private void Cancel()
    {
        CancellationTokenSource?.Cancel();
    }

}
