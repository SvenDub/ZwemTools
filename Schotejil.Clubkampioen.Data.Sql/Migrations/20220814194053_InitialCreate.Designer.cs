// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Schotejil.Clubkampioen.Data.Sql;

#nullable disable

namespace Schotejil.Clubkampioen.Data.Sql.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220814194053_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.AgeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxAge")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinAge")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("AgeGroups");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Athlete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("License")
                        .HasColumnType("TEXT");

                    b.Property<string>("NamePrefix")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MeetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MeetId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Meet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Course")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LiveTiming")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Organizer")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizerUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Meets");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Ranking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AgeGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Place")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResultId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AgeGroupId");

                    b.HasIndex("ResultId");

                    b.ToTable("Rankings");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AthleteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Lane")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("SwimTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.HasIndex("EventId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("MeetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly?>("OfficialMeeting")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("WarmupEnd")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("WarmupStart")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MeetId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.AgeGroup", b =>
                {
                    b.HasOne("Schotejil.Clubkampioen.Data.Sql.Event", "Event")
                        .WithMany("AgeGroups")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Athlete", b =>
                {
                    b.HasOne("Schotejil.Clubkampioen.Data.Sql.Club", "Club")
                        .WithMany("Athletes")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Club", b =>
                {
                    b.HasOne("Schotejil.Clubkampioen.Data.Sql.Meet", "Meet")
                        .WithMany("Clubs")
                        .HasForeignKey("MeetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meet");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Event", b =>
                {
                    b.HasOne("Schotejil.Clubkampioen.Data.Sql.Session", "Session")
                        .WithMany("Events")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Schotejil.Clubkampioen.Data.Sql.SwimStyle", "SwimStyle", b1 =>
                        {
                            b1.Property<int>("EventId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Distance")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("RelayCount")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Stroke")
                                .HasColumnType("INTEGER");

                            b1.HasKey("EventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.Navigation("Session");

                    b.Navigation("SwimStyle")
                        .IsRequired();
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Meet", b =>
                {
                    b.OwnsOne("Schotejil.Clubkampioen.Data.Sql.AgeDate", "AgeDate", b1 =>
                        {
                            b1.Property<int>("MeetId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Type")
                                .HasColumnType("INTEGER");

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("TEXT");

                            b1.HasKey("MeetId");

                            b1.ToTable("Meets");

                            b1.WithOwner()
                                .HasForeignKey("MeetId");
                        });

                    b.Navigation("AgeDate");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Ranking", b =>
                {
                    b.HasOne("Schotejil.Clubkampioen.Data.Sql.AgeGroup", null)
                        .WithMany("Rankings")
                        .HasForeignKey("AgeGroupId");

                    b.HasOne("Schotejil.Clubkampioen.Data.Sql.Result", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Result", b =>
                {
                    b.HasOne("Schotejil.Clubkampioen.Data.Sql.Athlete", null)
                        .WithMany("Results")
                        .HasForeignKey("AthleteId");

                    b.HasOne("Schotejil.Clubkampioen.Data.Sql.Event", "Event")
                        .WithMany("Results")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Session", b =>
                {
                    b.HasOne("Schotejil.Clubkampioen.Data.Sql.Meet", "Meet")
                        .WithMany("Sessions")
                        .HasForeignKey("MeetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meet");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.AgeGroup", b =>
                {
                    b.Navigation("Rankings");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Athlete", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Club", b =>
                {
                    b.Navigation("Athletes");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Event", b =>
                {
                    b.Navigation("AgeGroups");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Meet", b =>
                {
                    b.Navigation("Clubs");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Schotejil.Clubkampioen.Data.Sql.Session", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
