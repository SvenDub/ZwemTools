@page "/relays"
@using Microsoft.Extensions.Logging;
@using Schotejil.Clubkampioen.Data.TeamManager;
@using Schotejil.Clubkampioen;
@inject ITeamManagerDatabase Database
@inject RelaysService RelaysService
@inject IStringLocalizer<Strings> Localizer
@inject DialogService DialogService
@inject ILogger<Relays> Logger

<h3>@Strings.Relays</h3>

@if (!OperatingSystem.IsWindows())
{
    <p>@this.Localizer["Windows only!"]</p>
    return;
}

@if (this.TeamManagerFound is null)
{
    <p>@this.Localizer["Looking for Team Manager..."]</p>
    return;
}
else if (!this.TeamManagerFound.Value)
{
    <p>@this.Localizer["Team Manager not found."]</p>
    return;
}

<div class="row mb-2">
    <div class="col">
        <RadzenDropDown TValue="Meet" AllowVirtualization="false" Data="this.Meets" Change="@OnMeetSelected" style="height: auto;" @bind-Value="this.SelectedMeet">
            <Template>
                @if (context is Meet meet)
                {
                    <span class="d-block">@meet.Name (@meet.Place)</span>
                    <span class="d-block text-muted small">@meet.MaxDate.ToString("d")</span>
                }
            </Template>
        </RadzenDropDown>
    </div>
    @if (this.Events is not null) {
        <div class="col">
            <RadzenDropDown TValue="Event" AllowVirtualization="false" Data="this.Events" Change="@OnEventSelected" style="height: auto;" @bind-Value="this.SelectedEvent">
                <Template>
                    @if (context is Event ev)
                    {
                        <span class="d-block">@ev.Number - @(ev.SwimStyle?.RelayCount)x@(ev.SwimStyle?.Distance)m @ev.SwimStyle?.Stroke (@ev.MinAge-@ev.MaxAge, @ev.Gender)</span>
                    }
                </Template>
            </RadzenDropDown>
        </div>
    }
</div>

@if (this.FilteredMembers is not null && this.SelectedEvent is { SwimStyle: { } })
{
    <div class="row mb-2">
        <div class="col-2">
            
        </div>
        <div class="col">
            <RadzenListBox
                @bind-Value="@SelectedMembers"
                Data="@FilteredMembers"
                Multiple
                AllowClear
                AllowFiltering
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                FilterOperator="StringFilterOperator.Contains"
                TextProperty="@nameof(Member.FullName)"
                Style="height: 400px"
            ></RadzenListBox>
        </div>
        <div class="col">
            <RadzenListBox
                TValue="IEnumerable<Data.TeamManager.Group>"
                Value="@SelectedGroups"
                ValueChanged="@OnFilterChanged"
                Data="@Groups"
                Multiple
                AllowClear
                AllowFiltering
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                FilterOperator="StringFilterOperator.Contains"
                TextProperty="@nameof(Data.TeamManager.Group.Name)"
                Style="height: 400px"
            ></RadzenListBox>
        </div>
    </div>
    <div class="row mb-2">
        <div class="col">
            <RadzenButton
                Text="@Strings.Calculate"
                ButtonStyle="ButtonStyle.Primary"
                Click="@CalculateRelay"
                Disabled="@(SelectedMembers.Count < SelectedEvent.SwimStyle.RelayCount)"></RadzenButton>
            <RadzenButton
                Text="@Strings.SelectAllInMeet"
                ButtonStyle="ButtonStyle.Secondary"
                Click="@SelectAllInMeet"></RadzenButton>
                <RadzenNumeric Min="1" @bind-Value="@RelayCount"/>
        </div>
    </div>
}

@if (this.IsLoading)
{
    <p class="my-3">@Localizer["Loading"]</p>
}

@if (this.GeneratedRelays is { } relays && this.SelectedEvent is { SwimStyle: { } swimStyle })
{
    @foreach (var relay in relays)
    {
        <RadzenDataGrid TItem="RelayPosition" Data="relay.Positions" class="mb-2">
            <Columns>
                <RadzenDataGridColumn TItem="RelayPosition" Property="Number"/>
                <RadzenDataGridColumn TItem="RelayPosition" Property="Member.FullName" Title="@Strings.Name" />
                <RadzenDataGridColumn TItem="RelayPosition" Title="@Strings.Time">
                    <Template>
                        @context.EntryTimeSpan.Format()
                    </Template>
                    <FooterTemplate>
                        <span class="@(relay.Positions.Count < swimStyle.RelayCount ? "text-danger" : "")">@relay.EntryTime.Format()</span>
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="RelayPosition" Property="@nameof(RelayPosition.Stroke)" Title="@Strings.Stroke"/>
            </Columns>
        </RadzenDataGrid>
    }
}

@code {
    private bool? TeamManagerFound { get; set; }
    private IEnumerable<Meet>? Meets { get; set; }
    private IEnumerable<Member>? Members { get; set; }
    private Meet? SelectedMeet { get; set; }
    private IEnumerable<Event>? Events { get; set; }
    private Event? SelectedEvent { get; set; }
    private IEnumerable<Member>? MembersInMeet { get; set; }
    private List<Member> SelectedMembers { get; set; } = new List<Member>();
    private IEnumerable<Data.TeamManager.Group>? Groups { get; set; }
    private IEnumerable<Data.TeamManager.Group> SelectedGroups { get; set; } = new List<Data.TeamManager.Group>();
    private List<Member> FilteredMembers { get; } = new List<Member>();
    private IEnumerable<Relay>? GeneratedRelays { get; set; }
    private bool IsLoading { get; set; } = false;
    private int RelayCount { get; set; } = 1;

    protected async override Task OnInitializedAsync()
    {
        this.TeamManagerFound = await this.Database.TestConnection();
        this.Meets = (await this.Database.GetMeetsWithRelays()).ToList();
        this.Members = (await this.Database.GetMembers()).ToList();
        this.Groups = (await this.Database.GetGroups()).ToList();
        this.SelectedGroups = this.Groups.Where(g => g.Id == "LICENTIE").ToList();
        this.UpdateFilteredMembers();
    }

    async Task OnMeetSelected(object o)
    {
        this.GeneratedRelays = null;
        if (o is Meet meet)
        {
            this.SelectedMeet = meet;
            this.Events = await this.Database.GetRelays(meet.Id);
            this.SelectedEvent = null;
            this.MembersInMeet = await this.Database.GetMembers(meet.Id);
        }
        else
        {
            this.SelectedMeet = null;
            this.Events = null;
            this.SelectedEvent = null;
            this.MembersInMeet = null;
        }
    }

    void OnEventSelected(object o)
    {
        this.GeneratedRelays = null;
        if (o is Event ev)
        {
            this.SelectedEvent = ev;
        }
        else
        {
            this.SelectedEvent = null;
        }
    }

    void OnFilterChanged(IEnumerable<Data.TeamManager.Group> o)
    {
        this.SelectedGroups = o;
        this.UpdateFilteredMembers();
    }

    void SelectAllInMeet()
    {
        if (this.MembersInMeet is not null)
        {
            foreach (var member in this.MembersInMeet.Where(member => !this.SelectedMembers.Contains(member)))
            {
                this.SelectedMembers.Add(member);
            }
        }
    }

    async Task CalculateRelay()
    {
        if (this.SelectedMeet is not null && this.SelectedEvent is not null)
        {
            try
            {
                this.IsLoading = true;
                await Task.Delay(10);
                this.GeneratedRelays = await this.RelaysService.CalculateRelays(this.SelectedMeet, this.SelectedEvent, this.SelectedMembers, this.RelayCount);
            }
            catch (Exception e)
            {
                this.Logger.LogError(e, "Error");
                await this.DialogService.Alert(e.Message, "Error");
            }
            finally
            {
                this.IsLoading = false;
            }
        }
    }

    private void UpdateFilteredMembers()
    {
        this.FilteredMembers.Clear();
        this.FilteredMembers.AddRange(this.Members?.Where(member => member.GroupNames.Any(group => this.SelectedGroups.Any(s => s.Id == group))) ?? Enumerable.Empty<Member>());
    }
}
