@page "/relays"
@using Schotejil.Clubkampioen.Data.TeamManager;
@inject TeamManagerDatabase Database
@inject IStringLocalizer<Strings> Localizer

<h3>@Strings.Relays</h3>

@if (!OperatingSystem.IsWindows())
{
    <p>Windows only!</p>
    return;
}

<div class="row mb-2">
    <div class="col">
        <RadzenDropDown TValue="Meet" AllowVirtualization="false" Data="this.Meets" Change="@OnMeetSelected" style="height: auto;" @bind-Value="this.SelectedMeet">
            <Template>
                @if (context is Meet meet)
                {
                    <span class="d-block">@meet.Name (@meet.Place)</span>
                    <span class="d-block text-muted small">@meet.MaxDate.ToString("d")</span>
                }
            </Template>
        </RadzenDropDown>
    </div>
    @if (this.Events is not null) {
        <div class="col">
            <RadzenDropDown TValue="Event" AllowVirtualization="false" Data="this.Events" Change="@OnEventSelected" style="height: auto;" @bind-Value="this.SelectedEvent">
                <Template>
                    @if (context is Event ev)
                    {
                        <span class="d-block">@ev.Number - @(ev.SwimStyle?.RelayCount)x@(ev.SwimStyle?.Distance)m @ev.SwimStyle?.Stroke (@ev.MinAge-@ev.MaxAge, @ev.Gender)</span>
                    }
                </Template>
            </RadzenDropDown>
        </div>
    }
</div>

@if (this.FilteredMembers is not null)
{
    <div class="row">
        <div class="col-2">
            <RadzenButton
                Text="@Strings.SelectAllInMeet"
                ButtonStyle="ButtonStyle.Primary"
                Click="@(_ => SelectAllInMeet())"
            ></RadzenButton>
        </div>
        <div class="col">
            <RadzenListBox
                @bind-Value="@SelectedMembers"
                Data="@FilteredMembers"
                Multiple
                AllowClear
                AllowFiltering
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                FilterOperator="StringFilterOperator.Contains"
                TextProperty="@nameof(Member.FullName)"
                Style="height: 400px"
            ></RadzenListBox>
        </div>
        <div class="col">
            <RadzenListBox
                TValue="IEnumerable<Data.TeamManager.Group>"
                Value="@SelectedGroups"
                ValueChanged="@OnFilterChanged"
                Data="@Groups"
                Multiple
                AllowClear
                AllowFiltering
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                FilterOperator="StringFilterOperator.Contains"
                TextProperty="@nameof(Data.TeamManager.Group.Name)"
                Style="height: 400px"
            ></RadzenListBox>
        </div>
    </div>
}

@code {
    private IEnumerable<Meet>? Meets { get; set; }
    private IEnumerable<Member>? Members { get; set; }
    private Meet? SelectedMeet { get; set; }
    private IEnumerable<Event>? Events { get; set; }
    private Event? SelectedEvent { get; set; }
    private IEnumerable<Member>? MembersInMeet { get; set; }
    private List<Member> SelectedMembers { get; set; } = new List<Member>();
    private IEnumerable<Data.TeamManager.Group>? Groups { get; set; }
    private IEnumerable<Data.TeamManager.Group> SelectedGroups { get; set; } = new List<Data.TeamManager.Group>();
    private List<Member> FilteredMembers { get; } = new List<Member>();

    protected override void OnInitialized()
    {
        this.Meets = this.Database.GetMeets().ToList();
        this.Members = this.Database.GetMembers().ToList();
        this.Groups = this.Database.GetGroups().ToList();
        this.SelectedGroups = this.Groups.Where(g => g.Id == "LICENTIE").ToList();
        this.UpdateFilteredMembers();
    }

    void OnMeetSelected(object o)
    {
        if (o is Meet meet)
        {
            this.SelectedMeet = meet;
            this.Events = this.Database.GetRelays(meet.Id);
            this.SelectedEvent = null;
            this.MembersInMeet = this.Database.GetMembers(meet.Id);
        }
        else
        {
            this.SelectedMeet = null;
            this.Events = null;
            this.SelectedEvent = null;
            this.MembersInMeet = null;
        }
    }

    void OnEventSelected(object o)
    {
        if (o is Event ev)
        {
            this.SelectedEvent = ev;
        }
        else
        {
            this.SelectedEvent = null;
        }
    }

    void OnFilterChanged(IEnumerable<Data.TeamManager.Group> o)
    {
        this.SelectedGroups = o;
        this.UpdateFilteredMembers();
    }

    void SelectAllInMeet()
    {
        if (this.MembersInMeet is not null)
        {
            foreach (var member in this.MembersInMeet.Where(member => !this.SelectedMembers.Contains(member)))
            {
                this.SelectedMembers.Add(member);
            }
        }
    }

    private void UpdateFilteredMembers()
    {
        this.FilteredMembers.Clear();
        this.FilteredMembers.AddRange(this.Members?.Where(member => member.GroupNames.Any(group => this.SelectedGroups.Any(s => s.Id == group))) ?? Enumerable.Empty<Member>());
    }
}
