@page "/lac"
@using Schotejil.Clubkampioen.Data.Lenex;
@using Schotejil.Clubkampioen.Data.Lenex.Xml;
@inject LenexParser LenexParser
@inject IStringLocalizer<Strings> Localizer

<div class="d-print-none">
    <h3>LAC</h3>

    <InputFile OnChange="@LoadFile" accept=".lxf" />
</div>

@if (!this.IsLoading && this.LenexElement is not null)
{
    @if (this.LenexElement.Meets is { Count: >0 })
    {
        var meet = this.LenexElement.Meets.First();
        var session = meet.Sessions.First();
        @foreach (var (club, athlete, entry) in this.GetEntries(meet, session))
        {
            <div class="pagebreak">
                <Card Meet="meet" Session="session" Club="club" Athlete="athlete" Entry="entry"/>
            </div>
        }
    }
    else
    {
        <p class="my-3">@Localizer["NoData"]</p>
    }
}
else if (this.IsLoading)
{
    <p class="my-3">@Localizer["Loading"]</p>
}
else
{
    <p class="my-3">@Localizer["NoData"]</p>
}

@code {
    private LenexElement? LenexElement { get; set; }
    private bool IsLoading { get; set; } = false;
    private bool IsSaving { get; set; } = false;

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        this.IsLoading = true;
        await using Stream stream = e.File.OpenReadStream();
        MemoryStream ms = new();
        await stream.CopyToAsync(ms);
        this.LenexElement = this.LenexParser.Parse(ms);
        this.IsLoading = false;
    }

    private IEnumerable<(ClubElement club, AthleteElement athlete, EntryElement entry)> GetEntries(MeetElement meet, SessionElement session)
    {
        IEnumerable<(ClubElement club, AthleteElement athlete, EntryElement entry)> Entries()
        {
            foreach (var club in meet.Clubs)
            {
                foreach (var athlete in club.Athletes)
                {
                    foreach (var entry in athlete.Entries)
                    {
                        yield return (club, athlete, entry);
                    }
                }
            }
        }

        return Entries()
            .OrderBy(tuple => GetEvent(session, tuple.entry.EventId).Number)
            .ThenBy(tuple => tuple.entry.HeatId is { } heatId ? GetHeat(session, heatId).Number : 0)
            .ThenBy(tuple => tuple.entry.Lane);
    }

    private EventElement GetEvent(SessionElement session, int eventId)
    {
        return session.Events.First(e => e.EventId == eventId);
    }

    private HeatElement GetHeat(SessionElement session, int heatId)
    {
        return session.Events.SelectMany(e => e.Heats).First(h => h.HeatId == heatId);
    }
}
